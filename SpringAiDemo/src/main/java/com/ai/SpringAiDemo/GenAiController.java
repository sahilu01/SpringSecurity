package com.ai.SpringAiDemo;

import org.springframework.ai.image.ImageResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.List;

/**
 * @author sahil.sharma
 */


@RestController
public class GenAiController {

  private final ChatService chatService;

  private final ImageService imageService;

  private final RecipeService recipeService;

  private final TranscriptionService transcriptionService;

  public GenAiController(ChatService chatService, ImageService imageService, RecipeService recipeService,
      TranscriptionService transcriptionService) {
    this.chatService = chatService;
    this.imageService = imageService;
    this.recipeService = recipeService;
    this.transcriptionService = transcriptionService;
  }

  /**
   * Generates a response from AI for the given prompt.
   *
   * @param prompt the input query or request for the AI
   * @return a response string generated by AI
   */
  @GetMapping("ask-ai")
  public String getResponse(@RequestParam String prompt) {
    return chatService.getResponse(prompt);
  }

  /**
   * Generates response options from AI for the given prompt.
   *
   * @param prompt the input query or request for the AI
   * @return a string with multiple response options
   */
  @GetMapping("ask-ai-options")
  public String getResponseOptions(@RequestParam String prompt) {
    return chatService.getResponseOptions(prompt);
  }

  /**
   * Generates image URLs based on the given prompt.
   *
   * @param prompt the input description for image generation
   * @param width the width of the generated images (optional, default is 256)
   * @param height the height of the generated images (optional, default is 256)
   * @param numImages the number of images to generate (optional, default is 1)
   * @return a list of URLs of the generated images
   * @throws IOException if an error occurs during the image generation process
   */
  @GetMapping("generate-image-options")
  public List<String> generateImageOptions(@RequestParam String prompt,
      @RequestParam(defaultValue = "256") int width,
      @RequestParam(defaultValue = "256") int height,
      @RequestParam(defaultValue = "1") int numImages) throws IOException {
    ImageResponse imageResponse = imageService.generateImageOptions(prompt, width, height, numImages);
  
    return imageResponse.getResults().stream().map(imageGeneration -> imageGeneration.getOutput().getUrl()).toList();
  
  }

    /**
     * Creates a recipe based on the given ingredients, cuisine, and dietary restrictions.
     *
     * @param ingredients a list of ingredients to be used in the recipe
     * @param cuisine the type of cuisine (e.g., Italian, Indian, etc.)
     * @param dietaryRestrictions dietary preferences or restrictions (e.g., vegan, gluten-free)
     * @return a string containing the generated recipe
     */
    @GetMapping("create-recipe")
    public String createRecipe(@RequestParam String ingredients,
        @RequestParam String cuisine,
        @RequestParam String dietaryRestrictions) {
        return recipeService.createRecipe(ingredients, cuisine, dietaryRestrictions);
    }

    /**
     * Transcribes audio input into text.
     *
     * @return the transcribed text
     */
    @GetMapping("transcribe-audio")
    public String transcribeAudio() {
        return transcriptionService.transcribeAudio();
    }





}
